#pragma kernel CSParticleRenderer

struct Particle{
    float2 position;
};
struct Vertex{
    float3 position;
    float2 uv;
};
RWStructuredBuffer<Particle> particlesBuffer;
RWStructuredBuffer<Vertex> verticesBuffer;
float particleRadius;

[numthreads(256, 1, 1)]
void CSParticleRenderer (uint3 id : SV_DispatchThreadID)
{
    int particleI = id.x;
    Particle particle = particlesBuffer[particleI];
    float2 particlePosition = particle.position;

    int vertexStartI = particleI * 6;

    verticesBuffer[vertexStartI].position.x = particlePosition.x - particleRadius;
    verticesBuffer[vertexStartI].position.y = particlePosition.y - particleRadius;
    verticesBuffer[vertexStartI].position.z = particlePosition.z;

    verticesBuffer[vertexStartI + 1].position.x = particlePosition.x - particleRadius;
    verticesBuffer[vertexStartI + 1].position.y = particlePosition.y + particleRadius;
    verticesBuffer[vertexStartI + 1].position.z = particlePosition.z;

    verticesBuffer[vertexStartI + 2].position.x = particlePosition.x + particleRadius;
    verticesBuffer[vertexStartI + 2].position.y = particlePosition.y + particleRadius;
    verticesBuffer[vertexStartI + 2].position.z = particlePosition.z;

    verticesBuffer[vertexStartI + 3].position.x = particlePosition.x - particleRadius;
    verticesBuffer[vertexStartI + 3].position.y = particlePosition.y - particleRadius;
    verticesBuffer[vertexStartI + 3].position.z = particlePosition.z;

    verticesBuffer[vertexStartI + 4].position.x = particlePosition.x + particleRadius;
    verticesBuffer[vertexStartI + 4].position.y = particlePosition.y + particleRadius;
    verticesBuffer[vertexStartI + 4].position.z = particlePosition.z;

    verticesBuffer[vertexStartI + 5].position.x = particlePosition.x + particleRadius;
    verticesBuffer[vertexStartI + 5].position.y = particlePosition.y - particleRadius;
    verticesBuffer[vertexStartI + 5].position.z = particlePosition.z;
}
